// Code generated by MockGen. DO NOT EDIT.
// Source: user_info_cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"
	model "user-service/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInfoCache is a mock of UserInfoCache interface.
type MockUserInfoCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoCacheMockRecorder
}

// MockUserInfoCacheMockRecorder is the mock recorder for MockUserInfoCache.
type MockUserInfoCacheMockRecorder struct {
	mock *MockUserInfoCache
}

// NewMockUserInfoCache creates a new mock instance.
func NewMockUserInfoCache(ctrl *gomock.Controller) *MockUserInfoCache {
	mock := &MockUserInfoCache{ctrl: ctrl}
	mock.recorder = &MockUserInfoCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoCache) EXPECT() *MockUserInfoCacheMockRecorder {
	return m.recorder
}

// DelUserInfoCache mocks base method.
func (m *MockUserInfoCache) DelUserInfoCache(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserInfoCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserInfoCache indicates an expected call of DelUserInfoCache.
func (mr *MockUserInfoCacheMockRecorder) DelUserInfoCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserInfoCache", reflect.TypeOf((*MockUserInfoCache)(nil).DelUserInfoCache), ctx, id)
}

// GetUserInfoCache mocks base method.
func (m *MockUserInfoCache) GetUserInfoCache(ctx context.Context, id int64) (*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoCache", ctx, id)
	ret0, _ := ret[0].(*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoCache indicates an expected call of GetUserInfoCache.
func (mr *MockUserInfoCacheMockRecorder) GetUserInfoCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoCache", reflect.TypeOf((*MockUserInfoCache)(nil).GetUserInfoCache), ctx, id)
}

// MultiGetUserInfoCache mocks base method.
func (m *MockUserInfoCache) MultiGetUserInfoCache(ctx context.Context, ids []int64) (map[string]*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetUserInfoCache", ctx, ids)
	ret0, _ := ret[0].(map[string]*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetUserInfoCache indicates an expected call of MultiGetUserInfoCache.
func (mr *MockUserInfoCacheMockRecorder) MultiGetUserInfoCache(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetUserInfoCache", reflect.TypeOf((*MockUserInfoCache)(nil).MultiGetUserInfoCache), ctx, ids)
}

// MultiSetUserInfoCache mocks base method.
func (m *MockUserInfoCache) MultiSetUserInfoCache(ctx context.Context, data []*model.UserInfoModel, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSetUserInfoCache", ctx, data, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiSetUserInfoCache indicates an expected call of MultiSetUserInfoCache.
func (mr *MockUserInfoCacheMockRecorder) MultiSetUserInfoCache(ctx, data, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSetUserInfoCache", reflect.TypeOf((*MockUserInfoCache)(nil).MultiSetUserInfoCache), ctx, data, duration)
}

// SetUserInfoCache mocks base method.
func (m *MockUserInfoCache) SetUserInfoCache(ctx context.Context, id int64, data *model.UserInfoModel, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserInfoCache", ctx, id, data, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserInfoCache indicates an expected call of SetUserInfoCache.
func (mr *MockUserInfoCacheMockRecorder) SetUserInfoCache(ctx, id, data, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserInfoCache", reflect.TypeOf((*MockUserInfoCache)(nil).SetUserInfoCache), ctx, id, data, duration)
}
