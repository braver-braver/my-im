// Code generated by MockGen. DO NOT EDIT.
// Source: user_info_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	model "user-service/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInfoRepo is a mock of UserInfoRepo interface.
type MockUserInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoRepoMockRecorder
}

// MockUserInfoRepoMockRecorder is the mock recorder for MockUserInfoRepo.
type MockUserInfoRepoMockRecorder struct {
	mock *MockUserInfoRepo
}

// NewMockUserInfoRepo creates a new mock instance.
func NewMockUserInfoRepo(ctrl *gomock.Controller) *MockUserInfoRepo {
	mock := &MockUserInfoRepo{ctrl: ctrl}
	mock.recorder = &MockUserInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoRepo) EXPECT() *MockUserInfoRepoMockRecorder {
	return m.recorder
}

// BatchGetUserInfo mocks base method.
func (m *MockUserInfoRepo) BatchGetUserInfo(ctx context.Context, ids []int64) ([]*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetUserInfo", ctx, ids)
	ret0, _ := ret[0].([]*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetUserInfo indicates an expected call of BatchGetUserInfo.
func (mr *MockUserInfoRepoMockRecorder) BatchGetUserInfo(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetUserInfo", reflect.TypeOf((*MockUserInfoRepo)(nil).BatchGetUserInfo), ctx, ids)
}

// CreateUserInfo mocks base method.
func (m *MockUserInfoRepo) CreateUserInfo(ctx context.Context, data *model.UserInfoModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInfo", ctx, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserInfo indicates an expected call of CreateUserInfo.
func (mr *MockUserInfoRepoMockRecorder) CreateUserInfo(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInfo", reflect.TypeOf((*MockUserInfoRepo)(nil).CreateUserInfo), ctx, data)
}

// GetUserByEmail mocks base method.
func (m *MockUserInfoRepo) GetUserByEmail(ctx context.Context, email string) (*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserInfoRepoMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserInfoRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByPhone mocks base method.
func (m *MockUserInfoRepo) GetUserByPhone(ctx context.Context, phone string) (*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockUserInfoRepoMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockUserInfoRepo)(nil).GetUserByPhone), ctx, phone)
}

// GetUserByUsername mocks base method.
func (m *MockUserInfoRepo) GetUserByUsername(ctx context.Context, username string) (*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserInfoRepoMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserInfoRepo)(nil).GetUserByUsername), ctx, username)
}

// GetUserInfo mocks base method.
func (m *MockUserInfoRepo) GetUserInfo(ctx context.Context, id int64) (*model.UserInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, id)
	ret0, _ := ret[0].(*model.UserInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserInfoRepoMockRecorder) GetUserInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserInfoRepo)(nil).GetUserInfo), ctx, id)
}

// UpdateUserInfo mocks base method.
func (m *MockUserInfoRepo) UpdateUserInfo(ctx context.Context, id int64, data *model.UserInfoModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserInfoRepoMockRecorder) UpdateUserInfo(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserInfoRepo)(nil).UpdateUserInfo), ctx, id, data)
}
